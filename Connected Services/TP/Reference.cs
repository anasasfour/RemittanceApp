//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TP
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "TP.IMiddlewareService")]
    public interface IMiddlewareService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMiddlewareService/Send", ReplyAction = "http://tempuri.org/IMiddlewareService/SendResponse")]
        TP.SendResponse Send(TP.SendRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IMiddlewareService/Send", ReplyAction = "http://tempuri.org/IMiddlewareService/SendResponse")]
        System.Threading.Tasks.Task<TP.SendResponse> SendAsync(TP.SendRequest request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "Send", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class SendRequest
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string xmlRequest;

        public SendRequest()
        {
        }

        public SendRequest(string xmlRequest)
        {
            this.xmlRequest = xmlRequest;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "SendResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class SendResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public string SendResult;

        public SendResponse()
        {
        }

        public SendResponse(string SendResult)
        {
            this.SendResult = SendResult;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMiddlewareServiceChannel : TP.IMiddlewareService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MiddlewareServiceClient : System.ServiceModel.ClientBase<TP.IMiddlewareService>, TP.IMiddlewareService
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public MiddlewareServiceClient() :
                base(MiddlewareServiceClient.GetDefaultBinding(), MiddlewareServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.ClientsTest.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MiddlewareServiceClient(EndpointConfiguration endpointConfiguration) :
                base(MiddlewareServiceClient.GetBindingForEndpoint(endpointConfiguration), MiddlewareServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MiddlewareServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(MiddlewareServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MiddlewareServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(MiddlewareServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public MiddlewareServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public TP.SendResponse Send(TP.SendRequest request)
        {
            return base.Channel.Send(request);
        }

        public System.Threading.Tasks.Task<TP.SendResponse> SendAsync(TP.SendRequest request)
        {
            return base.Channel.SendAsync(request);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ClientsTest))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ClientsTest))
            {
                return new System.ServiceModel.EndpointAddress("http://10.1.46.45/MiddlewareService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MiddlewareServiceClient.GetBindingForEndpoint(EndpointConfiguration.ClientsTest);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MiddlewareServiceClient.GetEndpointAddress(EndpointConfiguration.ClientsTest);
        }

        public enum EndpointConfiguration
        {

            ClientsTest,
        }
    }
}
